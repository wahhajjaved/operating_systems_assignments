Part A

	A.1
		Windows program that uses multiple threads to compute squares of
		positive integers. Function for this task provided.

		Usage: ./partA1 threads deadline size.

		Parent Thread Functionality:
			- Create M child threads
			- Sleep until deadline
			- Inform children to exit if deadlines is reached before
				child threads finish

		Child Thread Functionality:
			- compute Square(), provided in assignment
			- Square() should count the number of times its been invoked
			- On child thread exit, print:
				-- elapsed time since child began
				-- number of invocations of Square()

	Other Requirements:
		- Square must be in 1 C source file
		- Compiles and link for Windows and Linux on Intel
		- Design document



Part B

	Interactive shell script that executes Parts A.1, A.2, A.3 or A.4
	(bonus) according to the user's instructions. This should allow a user
	to provide arguments to the program interactively in a loop until the
	end of file is reached. Have the user input contain 3 integers on each
	line and validate input in both bash script and C program.

	Usage: partB.bash version
		where version is one of partA1, partA2, or partA3 (or partA4)



Part C

	Make a list library which can store NODE elements. Each NODE struct should
	store a single void * item. Users should be able to create multiple lists
	with homogenous data types.

	Source Requirements
		- No dynamic memory allocation on a per list of per node basis.
		- malloc() may only be used once at the begining of the program to
			allocate a large chunk of memory for a collection of lists or nodes
		- Define max number of LISTS and max number of NODES
		- List may have between 0 and max nodes
		- No more than max nodes may be in use at any point
		- Similar rules for lists
		- Create all functions defined in assignment doc
		- Functions only need to validate input and print
			"Got to function <name>"
		- Test program that contains unit tests for each function
		- Implementation should be in the following files:
			list.h, list_adders.c, list_movers.c, list_removers.c, mytestlist.c

	Makefile Requirements
		- Compile list program into a static library
		- make mytestlist.c
		- make class test program testlist.c
		- only compile on Linux



