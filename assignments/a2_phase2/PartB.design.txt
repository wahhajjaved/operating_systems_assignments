# @author Wahhaj Javed, muj975, 11135711
# @author Nakhba Mubashir, epl482, 11317060

------------------------------------
Monitors Part c

urgent             // semaphore that are urgent in monsignal
urgentNum          // to store how many urgent are waiting 
mutex            // semaphore for the enter state
monList
sem                // array of semaphors for each CV

// in phase 1 i chose to use struct to store the semaphores and it's count
and item, but in this phase i am changing into list as it simplier to use/
impliement and already i used list for monitor in lab 4. 


Procedures:
MonInit:
    mutex= NewSem(1)
    urgent= NewSem(0)
    urgentNum=0
    
    memory allocation for monList , each index initialized to 0
    memory allocation for sem, each index intialized to NewSem(o)


MonEnter()
    P(mutex) // wait for signal

MonLeave() 
    V(mutex) // send signal to leave

MonWait()
    // search the list for conditional variable 
    ListSearch(MonList, comparator, cmp)
    // cmp is the conditional variable
    // the comparator() function will be defined

    if cmp not in list then add it to the list
        listData = memory allocation
        newData.sem =NewSem(0) 
        newData.count=0
        add to list by listAdd(MonList,newData)

    newData.count ++

    V(mutex)  //send the signal to mutex 

    P(MonList.sem) // wait for the signal
    MonList.count --

MonSignal()
    // search the list for conditional variable
    ListSearch(MonList, comparator, cmp)
    // cmp is the conditional variable
    // the comparator() function will be defined

    //if atleast one thread waiting 
    if (ListData count >0)
        V(listData.sem)

____________________________________________

changes made 

reader-writer
changed rt threads to ubc pthreads


