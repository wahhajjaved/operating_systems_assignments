@author Wahhaj Javed, muj975, 11135711
@author Nakhba Mubashir, epl482, 11317060
@date 2024-09-16
@updates: 204-09-22

ASSIGNMENT 1: PHASE 1
PART C design document



int (COMPARATOR)(void *, void *)
void (ITEMFREE)(void *)

struct List Freed_list[]    /// array of freed lists
struct Node Freed_node      // array of freed of nodes

int nodesNum;              // to keep track of number of nodes used
int listNum;               // to keep track of number of lists used
LIST *listDict= NULL;      // dict of lists
NODE *NodeDict= NULL;      // dict of all the nodes
LIST *aviableList=NULL;    // the next available list that can be used
NODE *aviableNode=NULL;    // the next available node that can be used

struct
Node:
    void *value
    Node *next
    Node *prev
List:
    Node *head
    Node *tail
    int size     // size of the items in the list
    Node *curser // the current item
____________________________________________________
FUNCTIONS:
____
LIST *ListCreate():
description: creates a new empty list and return its reference or
Null if fails


algorithm:
    list size=0,
    add it dictionary
    if all list used: return Null
    else return the pointer to the head of the list (pointer to the list



test:
    1. calling the function to create new list for the first time
    2. calling it when atleat one list alreay exist
    3. calling it when max no. of list have been reaches
____
int ListCount(list)
description: it returns the number of items in the list

algorithm:
    check the size of list
    return list size

test:
    check the size of list that is
        1. empty
        2. lots of item
        3. max


____
void *ListFirst(list)
description: returns a pointer to the first item in list and makes the first
 item the current item.

algorithm:
    check if the list is not empty
    list.cursor= list head
    list cursor next = head next
    list cursor prev = null
    return list head item
test:
    check if the item is right, the next pointer is right(head.next) and prev
 is null

____
void *ListLast(list)
desription:returns a pointer to the last item in list and makes the last item
 the current one.

algorithm:
    check if the list is not empty
    list.cursor= list tail
    list cursor next = NULL
    list cursor prev = list tail prev
    return list last item
test:
    check if the item is right, the next pointer is null and prev is list
    tail.prev
____
void *ListNext(list)
description: goes to the next node in list, return the pointer to current
item or NULL if no current item

algorithm:
    if empty list OR list's last node then NULL
    else list curser =curser next

test:
    1. empty list
    2. last node in list
    3. first (it is diffrent from middle becuse prev is NULL)
    4. middle
____
void *ListPrev(list)
desciption: goes to the prev node in list, return the pointer to current
item or NULL if no current item

algorithm:
    if empty list OR list's first node then return NULL
    else list curser =curser prev

test:
    1. empty list
    2. first node in list
    3. last node in list (it is diffrent from middle becuse next is NULL)
    4. middle node in list

____

void *ListCurr(list)
description: returns a pointer to the current item in list

algorithm:
    if list not empty
    return curser.item

test:
    1. empty list
    2. curser at null when not empty
___
int ListAdd(list, item)
description:) adds the new item to list directly after the current item,
and makes the new item the current item. If the current pointer is at the
end of the list, the item is added at the end. Returns 0 on success, -1
on failure.

algorithm:
    //create new node
    new node item = item
    new node prev= current prev
    new node next =curser
    new curser = new node
    return 0

test:
    1. add at begining
    2. add at ending
    3. add at middle
    4. add to empty
    5. add to full

___

int ListInsert(list, item)
description:) adds the new item to list directly before the current item,
and makes the new item the current item. If the current pointer is at the
end of the list, the item is added at the end. Returns 0 on success, -1
on failure.

algorithm:
    //create new node
    new node item = item
    new node next= current next
    new node prev =curser
    new curser = new node
    return 0

test:
    1. add at begining
    2. add at ending
    3. add at middle
    4. add to empty
    5. add to full

___
int ListAppend(list, item)

description:adds item to the end of list, and makes the new item the current
one. Returns 0 on success, -1 on failure.

algorithm:
    new node item = item
    new node prev= listlast()
    new node next =null
    new curser = new node

test:
    1. add at begining
    2. add at ending
    3. add at middle
    4. add to empty
    5. add to full

___
int ListPrepend(list, item)

description:adds item to the start of list, and makes the new item the current
one. Returns 0 on success, -1 on failure.

algorithm:
    new node item = item
    new node prev= null
    new node next =listFirst
    new curser = new node

test:
    1. add at begining
    2. add at ending
    3. add at middle
    4. add to empty
    5. add to full


___
void *ListRemove(list)
description:Return current item and take it out of list. Make the next item
the current one.

algorithm:
    if list not empty
        Node prevcurrent next= node newcureent
        node newcurrent prev = node prevcurrent
        list size decrease by 1
        add it freed_node

test:
    1. remove from starting and check size
    2. remove from ending and check size
    3. remove from middle and check size
    4. remove from empty and check size

___
void ListConcat(list1, list2)
description:adds list2 to the end of list1. The current pointer is set to the
 current pointer of list1. List2 no longer exists after the operation

algorithm:
    if list1 or list not empty
        last node of list2 prev= list1 last node
        remove l2 from list_dict

test:
    1. l1 empty
    2. l2 empty
    3. both l1 and l2 empty
    4. both l1 and l2 size more than 0

___
void ListFree(list, itemFree)
description:delete list. itemFree is a pointer to a routine that frees an item.
    It should be invoked (within ListFree) as: (*itemFree)(itemToBeFreed);
algorithm:
    iterate through the list, for each call (*itemFree)(itemToBeFreed)
    add to freed_list
test:
    1. emptylist
    2. list with 1 item
    3. list with more than 1 item

___
void *ListTrim(list)
description:Return last item and take it out of list. The current pointer shall
 be the new last item in the list.

algorithm:
    listLast(list)
    listRemove(list)
    add to freed_node

test:test when list is empty and not empty
___
void *ListSearch(list, comparator, comparisonArg)
description:searches list starting at the current item until the end is reached
or a match is found.

algorithm:
    if list not empty
        listfirst(list)
        if (*comparator)(list->current->item, comparisonArg) == 1
		    	return list->current.item
	    while list.current != list.tail
	    return null
    else return NULL

test:
    1. test with invalid parameter

_____
my own function:
int list_dict_size(){list_dict) // removed
description: calculate the size of list dictionary

algorithm:
    return size of list_dict/list_dict[0]

void ListInit(void)"{ //removed this function and added inside list create
    allocate memory to list and node by malloc
    link the node and list to prev and next
}

void increase_list_memory()
    reallocate the memory and initialize

void increase_node_memory()
    reallocate the memory and initialize


void decrease_list_memory()
    reallocate the memory and decrease by 2

void decrease_node_memory()
    reallocate the memory and decease by 2


void Print_List(LIST *list)
    prints the list

void testItemFree(void *item):
    for testing of item free

int testComp(void *item1,void *item2 )
    for testing of comparator

